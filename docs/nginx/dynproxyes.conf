location /websockify {

    set $vnc_addr '';
    access_by_lua '
        -- read from url params
        local args = ngx.req.get_uri_args()
        local token = args["t"]

        local mysql = require "resty.mysql"
        local db, err = mysql:new()
        if not db then
            ngx.say("failed to instantiate mysql: ", err)
            return
        end
        local ok, err, errcode, sqlstate = db:connect {
            host = ngx.var.dbhost,
            port = ngx.var.dbport,
            database = ngx.var.dbname,
            user = ngx.var.dbuser,
            password = ngx.var.dbpass,
            charset = "utf8",
            max_packet_size = 1024 * 1024,
        }
        if not ok then
            ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
            return
        end

        -- ngx.say("connected to mysql.")

        -- run a select query, expected about 1 row in
        -- the result set:
        local sql = "SELECT ip, port FROM websocket WHERE token = " .. ngx.quote_sql_str(token) .. " AND validUntil > " .. ngx.time()
        res, err, errcode, sqlstate =
            db:query(sql, 1)
        if not res then
            ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
            return
        end

        if table.getn(res) == 1 then
                local addr =  res[1].ip .. ":" .. res[1].port
                ngx.var.vnc_addr = addr
        else
                ngx.status = 403
                ngx.say("You don\'t exist go away!")
                ngx.exit(ngx.OK)
        end


    ';

    websockify_pass $vnc_addr;
    websockify_read_timeout 120;
}

location ~ ^/webproxify/([-_0-9a-zA-z]+)/(.*)$ {
    set $proxy_addr '';
    set $proxy_scheme 'http';
    set $token $1;
    set $path $2;

    access_by_lua '
        local token = ngx.var.token;

        local mysql = require "resty.mysql"
        local db, err = mysql:new()
        if not db then
            ngx.say("failed to instantiate mysql: ", err)
            return
        end
        local ok, err, errcode, sqlstate = db:connect {
            host = ngx.var.dbhost,
            port = ngx.var.dbport,
            database = ngx.var.dbname,
            user = ngx.var.dbuser,
            password = ngx.var.dbpass,
            charset = "utf8",
            max_packet_size = 1024 * 1024,
        }
        if not ok then
            ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
            return
        end

        -- run a select query, expected about 1 row in
        -- the result set:
        local sql = "SELECT ip, port FROM webproxy WHERE token = " .. ngx.quote_sql_str(token)  .. " AND validUntil > " .. ngx.time()
        res, err, errcode, sqlstate = db:query(sql, 1)
        if not res then
          ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
          return
        end

        if table.getn(res) == 1 then
            local addr =  res[1].ip .. ":" .. res[1].port
	          if res[1].port == 443 then
              ngx.var.proxy_scheme = "https"
            end
            -- Refresh token validity for further requests
            sql = "UPDATE webproxy SET validUntil = " .. ngx.time() + 300 .. " WHERE token = " .. ngx.quote_sql_str(token);
            res, err, errcode, sqlstate = db:query(sql, 1);
            ngx.var.proxy_addr = addr
        else
            ngx.status = 403
            ngx.say("You don\'t exist go away!")
            ngx.exit(ngx.OK)
        end
    ';

    sub_filter 'url=/' "url=$scheme://$host/webproxify/$token/";
    sub_filter 'url="/' "url=\"$scheme://$host/webproxify/$token/";
    sub_filter 'href=/' "href=$scheme://$host/webproxify/$token/";
    sub_filter 'href="/' "href=\"$scheme://$host/webproxify/$token/";
    sub_filter 'src=/' "src=$scheme://$host/webproxify/$token/";
    sub_filter 'src="/' "src=\"$scheme://$host/webproxify/$token/";
    sub_filter 'action=/' "action=$scheme://$host/webproxify/$token/";
    sub_filter 'action="/' "action=\"$scheme://$host/webproxify/$token/";
    sub_filter_once off;

    proxy_set_header Accept-Encoding "";
    proxy_buffering off;
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    proxy_read_timeout 300;
    send_timeout 300;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass_header Set-Cookie;

    proxy_pass $proxy_scheme://$proxy_addr/$path/;
    proxy_redirect $proxy_scheme://$proxy_addr/$path/ /webproxify/$token/;
#    proxy_redirect off;
}
